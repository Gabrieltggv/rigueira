name: Rigueira check

on:
  push:
  pull_request:
    branches: [main]
    types: [closed]

env:
  ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  USE_S3: ${{ secrets.USE_S3 }}
  DEBUG: ${{ secrets.DEBUG }}
  REGISTRY: ${{ secrets.REGISTRY }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}


jobs:
  test:
    runs-on: ubuntu-latest
    environment: rigueira
    name: Linter and test code
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build containers
        run: docker-compose -f docker-compose.yml build
      - name: Lint with flake8
        run: docker-compose run --rm web flake8
      - name: Check format with blue
        run: docker-compose run --rm web blue --check --diff --color .
      - name: Test
        run: docker-compose run --rm web pytest

  build_and_push:
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'main' && github.event_name == 'pull_request'
    environment: Deploy
    needs: test
    name: build_and_push
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Create env
        run: |
          touch .env
          echo "ENVIRONMENT='$ENVIRONMENT'" >> .env
          echo "SECRET_KEY='$SECRET_KEY'" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "USE_S3='${{ secrets.USE_S3 }}'" >> .env
          echo "DEBUG='${{ secrets.DEBUG }}'" >> .env
          echo "REGISTRY='${{ secrets.REGISTRY }}'" >> .env
          echo "IMAGE_NAME='${{ secrets.IMAGE_NAME }}'" >> .env
          echo "AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'" >> .env
          echo "AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'" >> .env
          echo "AWS_STORAGE_BUCKET_NAME='${{ secrets.AWS_STORAGE_BUCKET_NAME }}'" >> .env

      - name: Build image
        run: |
          cat .env
          docker-compose -f docker-compose-prod.yml build

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA)


  deploy:
        if: github.event.pull_request.base.ref == 'main' && github.event_name == 'pull_request'
        runs-on: ubuntu-latest
        name: Deploy to Digitalocean
        environment: Deploy
        needs: build_and_push

        steps:
          - name: Checkout
            uses: actions/checkout@v3
          - name: Execution containers
            uses: appleboy/ssh-action@master
            env:
                ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
                SECRET_KEY: ${{ secrets.SECRET_KEY }}
                DATABASE_URL: ${{ secrets.DATABASE_URL }}
                USE_S3: ${{ secrets.USE_S3 }}
                DEBUG: ${{ secrets.DEBUG }}
                REGISTRY: ${{ secrets.REGISTRY }}
                IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
            with:
              host: ${{ secrets.HOST }}
              username: ${{ secrets.USERNAME }}
              key: ${{ secrets.USERKEY }}
              envs:
                ENVIRONMENT,SECRET_KEY,DATABASE_URL,USE_S3, \
                DEBUG,REGISTRY,IMAGE_NAME,AWS_ACCESS_KEY_ID, \
                AWS_SECRET_ACCESS_KEY,AWS_STORAGE_BUCKET_NAME
              script: |
                docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
                docker pull $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA)
                docker run -d --name $(echo $IMAGE_NAME) $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA)

